name: "Gitea Release Downloader"
description: "Download a release from a Gitea repository"
inputs:
  repository:
    description: "The Gitea repository formatted as 'owner/repo'"
    required: true
  api_url:
    description: "The Gitea API URL (e.g. https://gitea.com/api/v1)"
    required: true
  token:
    description: "The Gitea API token"
    required: true
  filename:
    description: "The file to download"
    required: true
  release:
    description: "The release tag to download"
    required: false
    default: ""
  latest:
    description: "Download the latest release"
    required: false
    default: true
  debug:
    description: "Enable debug output"
    required: false
    default: false
outputs:
  file:
    description: "The downloaded file"
    value: ${{ steps.download.outputs.file }}
  version:
    description: "The version of the downloaded release"
    value: ${{ steps.download.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: "Download release"
      id: download
      run: |
        if ("${{ inputs.debug }}" -eq $true) {
          echo "Inputs:"
          echo "repository: ${{ inputs.repository }}"
          echo "api_url: ${{ inputs.api_url }}"
          echo "token: ${{ inputs.token }}"
          echo "filename: ${{ inputs.filename }}"
          echo "release: ${{ inputs.release }}"
          echo "latest: ${{ inputs.latest }}"
        }
        

        if ("${{ inputs.latest }}" -eq $true) {
          $latestReleaseUrl = "${{ inputs.api_url }}/repos/${{ inputs.repository }}/releases/latest"
          $latestRelease = Invoke-RestMethod -Uri $latestReleaseUrl -Headers @{ Authorization = "token ${{ inputs.token }}" }
          $releaseTag = $latestRelease.tag_name
        } else {
          $releaseTag = "${{ inputs.release }}"
        }
        
        $downloadUrl = "${{ inputs.api_url }}/repos/${{ inputs.repository }}/releases/tags/$releaseTag"
        echo "Downloading from $downloadUrl"
        $reponse = Invoke-RestMethod -Uri $downloadUrl -Headers @{ Authorization = "token ${{ inputs.token }}" }
        $asset = $reponse.assets | Where-Object { $_.name -eq "${{ inputs.filename }}" }
        $downloadLink = $asset.browser_download_url
        if ($asset -eq $null) {
          echo "Asset not found"
          exit 1
        }
        echo "Downloading $downloadLink"
        Invoke-WebRequest -Uri $downloadLink -Headers @{ Authorization = "token ${{ inputs.token }}" } -OutFile "${{ github.workspace }}/${{ inputs.filename }}"
        echo "::set-output name=file::${{ github.workspace }}/${{ inputs.filename }}"
        echo "::set-output name=version::$releaseTag"
      shell: pwsh